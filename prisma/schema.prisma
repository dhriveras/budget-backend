// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider   = "node node_modules/prisma-nestjs-graphql"
  emitBlocks = ["models"]
  output     = "../src/@generated/objectTypes"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  /// @HideField()
  password     String
  /// @HideField()
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  expenses   Expense[]
  categories Category[]
  accounts   Account[]
  incomes    Income[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [createdBy], references: [id])
  expenses Expense[]

  @@unique([name, createdBy])
}

model Expense {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  date        DateTime
  description String?
  createdBy   String
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accountId   String?

  user     User      @relation(fields: [createdBy], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  account  Account?  @relation(fields: [accountId], references: [id])
}

model Income {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  date        DateTime
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accountId   String

  user    User    @relation(fields: [createdBy], references: [id])
  account Account @relation(fields: [accountId], references: [id])
}

model Account {
  id             String      @id @default(uuid())
  name           String
  description    String?
  initialBalance Float
  type           AccountType
  currency       Currency
  createdBy      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user     User      @relation(fields: [createdBy], references: [id])
  expenses Expense[]
  incomes  Income[]

  @@unique([name, createdBy])
}

enum AccountType {
  CASH
  BANK
  CREDIT_CARD
}

enum Currency {
  NIO
  USD
  EUR
}
